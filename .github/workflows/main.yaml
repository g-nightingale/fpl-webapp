name: CI/CD Pipeline

on:
  workflow_dispatch:  # Allows the workflow to be triggered manually
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # build:
  #   name: Build
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v1

  #     - name: Configure AWS credentials using action
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Configure AWS credentials using CLI
  #       run: |
  #         aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws configure set default.region ${{ secrets.AWS_REGION }}

  #     - name: Verify AWS CLI configuration
  #       run: aws sts get-caller-identity

  #     - name: List root directory
  #       run: ls ~/runners

  #     - name: Build and push extract image
  #       run: | 
  #         cd src/db/extract_and_load
  #         pwd
  #         ls -la
  #         ./docker_image_build.sh

  #     - name: Build and push transform image
  #       run: | 
  #         cd src/db/transform
  #         pwd
  #         ls -la
  #         ./docker_image_build.sh

  #     - name: Build and push dynamodb_load image
  #       run: | 
  #         cd src/db/dynamodb_load
  #         pwd
  #         ls -la
  #         ./docker_image_build.sh

  #     - name: Build and push ml image
  #       run: | 
  #         cd src/ml
  #         pwd
  #         ls -la
  #         ./docker_image_build.sh

  deploy:
    name: Deploy Application and Infrastructure
    runs-on: ubuntu-latest
    # needs: ['build']

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Configure AWS credentials using action
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Configure AWS credentials using CLI
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region ${{ secrets.AWS_REGION }}

    - name: Verify AWS CLI configuration
      run: aws sts get-caller-identity

    - name: Initialize Terraform
      run: |
        cd infrastructure
        terraform init

    - name: Apply Terraform
      run: |
        cd infrastructure
        terraform apply -auto-approve

    - name: Deploy to EC2
      env:
        SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
      run: |
        # Install SSH Client
        sudo apt-get update && sudo apt-get install -y openssh-client

        # Setup SSH Key
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts

        # SSH to EC2 and run Docker commands
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$EC2_HOST << 'EOF'

          # Check if the directory exists
          if [ -d ~/fpl-webapp ]; then
            echo "Directory /fpl-webapp exists."
            # Pull latest code
            cd ~/fpl-webapp
            git pull origin main 
          else
            echo "Directory /fpl-webapp does not exist. Cloning repo..."
            git clone https://github.com/g-nightingale/fpl-webapp.git
            echo "Directory $DIRECTORY created."
          fi

          # Run the build script
          cd ~/fpl-webapp/src/flask
          chmod +x build.sh
          ./build.sh

        EOF

