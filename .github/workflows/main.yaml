name: CI/CD Pipeline

on:
  workflow_dispatch:  # Allows the workflow to be triggered manually
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Login to AWS ECR
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ secrets.AWS_REGION }}

      - name: List root directory
        run: ls -la

      - name: Run build and push script
        run: | 
          ./src/db/extract_and_load/docker_image_build.sh
          ./src/db/transform/docker_image_build.sh
          ./src/db/dynamodb_load/docker_image_build.sh
          ./src/ml/docker_image_build.sh

  deploy:
    name: Deploy Application and Infrastructure
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: Initialize Terraform
      run: |
        cd infrastructure
        terraform init

    - name: Apply Terraform
      run: |
        cd infrastructure
        terraform apply -auto-approve
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    #  - name: Deploy to EC2
        # env:
        #   SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        #   EC2_HOST: ${{ secrets.EC2_HOST }}
        # run: |
        #   # Install SSH Client
        #   sudo apt-get update && sudo apt-get install -y openssh-client
        #   # Setup SSH Key
        #   mkdir -p ~/.ssh
        #   echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        #   chmod 600 ~/.ssh/id_rsa
        #   ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts
        #   # SSH to EC2 and run Docker commands
        #   ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$EC2_HOST << 'EOF'
        #     # Commands to build and run your Docker container
        #     cd ~/cv-webapp
        #     git pull origin main # Pull latest code
            
        #     # Stop and remove the Docker container
        #     docker ps -q --filter "name=cv-webapp" | grep -q . && docker stop cv-webapp
        #     docker ps -aq --filter "name=cv-webapp" | grep -q . && docker rm cv-webapp

        #     # Remove the Docker image
        #     docker images -q cv-webapp| grep -q . && docker rmi cv-webapp

        #     # Build and run the new Docker image
        #     docker build -t cv-webapp .
        #     docker run -d --name cv-webapp -p 5002:80 cv-webapp

        #     # Update nginx stuff
        #     # Reset nginx
        #   EOF

